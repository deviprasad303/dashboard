{"version":3,"sources":["../../../src/utils/transition-manager.js"],"names":["noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","LinearInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","DEFAULT_STATE","animation","propsInTransition","startProps","endProps","TransitionManager","props","state","_onTransitionFrame","bind","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","isTransitionInProgress","_isTransitionInProgress","_isTransitionEnabled","Object","assign","interruption","_triggerTransition","_endTransition","Boolean","interpolator","arePropsEqual","_isUpdateDueToCurrentTransition","cancelAnimationFrame","initialProps","initializeProps","duration","easing","startTime","Date","now","start","end","requestAnimationFrame","_updateViewport","currentTime","shouldEnd","viewport","interpolateProps","mapState","MapState","getViewportProps","onViewportChange","onChangeViewport","onViewStateChange","viewState","defaultProps"],"mappings":"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","sourcesContent":["/* global requestAnimationFrame, cancelAnimationFrame */\nimport assert from './assert';\nimport {LinearInterpolator} from './transition';\nimport MapState from './map-state';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nconst DEFAULT_STATE = {\n  animation: null,\n  propsInTransition: null,\n  startProps: null,\n  endProps: null\n};\n\nexport default class TransitionManager {\n  constructor(props) {\n    this.props = props;\n    this.state = DEFAULT_STATE;\n\n    this._onTransitionFrame = this._onTransitionFrame.bind(this);\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.state.propsInTransition;\n  }\n\n  // Process the viewport change, either ignore or trigger a new transiton.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewportChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    const isTransitionInProgress = this._isTransitionInProgress();\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign({}, currentProps,\n        this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END ?\n        this.state.endProps : this.state.propsInTransition\n      );\n\n      if (isTransitionInProgress) {\n        currentProps.onTransitionInterrupt();\n      }\n      nextProps.onTransitionStart();\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else if (isTransitionInProgress) {\n      currentProps.onTransitionInterrupt();\n      this._endTransition();\n    }\n\n    return transitionTriggered;\n  }\n\n  // Helper methods\n\n  _isTransitionInProgress() {\n    return Boolean(this.state.propsInTransition);\n  }\n\n  _isTransitionEnabled(props) {\n    return props.transitionDuration > 0 && Boolean(props.transitionInterpolator);\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.state.propsInTransition) {\n      return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this._isTransitionInProgress()) {\n      // Ignore update if it is requested to be ignored\n      return this.state.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps);\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps), 'Transition is not enabled');\n\n    cancelAnimationFrame(this.state.animation);\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endProps\n    );\n\n    this.state = {\n      // Save current transition props\n      duration: endProps.transitionDuration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startTime: Date.now(),\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      animation: null,\n      propsInTransition: {}\n    };\n\n    this._onTransitionFrame();\n  }\n\n  _onTransitionFrame() {\n    // _updateViewport() may cancel the animation\n    this.state.animation = requestAnimationFrame(this._onTransitionFrame);\n    this._updateViewport();\n  }\n\n  _endTransition() {\n    cancelAnimationFrame(this.state.animation);\n    this.state = DEFAULT_STATE;\n  }\n\n  _updateViewport() {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const currentTime = Date.now();\n    const {startTime, duration, easing, interpolator, startProps, endProps} = this.state;\n\n    let shouldEnd = false;\n    let t = (currentTime - startTime) / duration;\n    if (t >= 1) {\n      t = 1;\n      shouldEnd = true;\n    }\n    t = easing(t);\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n      // Normalize viewport props\n    const mapState = new MapState(Object.assign({}, this.props, viewport));\n    this.state.propsInTransition = mapState.getViewportProps();\n\n    // TODO(deprecate): remove this check when `onChangeViewport` gets deprecated\n    const onViewportChange = this.props.onViewportChange || this.props.onChangeViewport;\n    if (onViewportChange) {\n      onViewportChange(this.state.propsInTransition);\n    }\n\n    if (this.props.onViewStateChange) {\n      this.props.onViewStateChange({viewState: this.state.propsInTransition});\n    }\n\n    if (shouldEnd) {\n      this._endTransition();\n      this.props.onTransitionEnd();\n    }\n  }\n}\n\nTransitionManager.defaultProps = DEFAULT_PROPS;\n"],"file":"transition-manager.js"}