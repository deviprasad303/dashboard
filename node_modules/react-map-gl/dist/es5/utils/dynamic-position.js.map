{"version":3,"sources":["../../../src/utils/dynamic-position.js"],"names":["ANCHOR_POSITION","top","x","y","bottom","left","right","getDynamicPosition","width","height","selfWidth","selfHeight","anchor","padding","anchorX","anchorY","yStep","xStep","Math","floor","Object","keys","find","positionType","anchorPosition"],"mappings":";;;;;;;AACO,IAAMA,kBAAkB;AAC7BC,OAAK;AAACC,OAAG,GAAJ;AAASC,OAAG;AAAZ,GADwB;AAE7B,cAAY;AAACD,OAAG,CAAJ;AAAOC,OAAG;AAAV,GAFiB;AAG7B,eAAa;AAACD,OAAG,CAAJ;AAAOC,OAAG;AAAV,GAHgB;AAI7BC,UAAQ;AAACF,OAAG,GAAJ;AAASC,OAAG;AAAZ,GAJqB;AAK7B,iBAAe;AAACD,OAAG,CAAJ;AAAOC,OAAG;AAAV,GALc;AAM7B,kBAAgB;AAACD,OAAG,CAAJ;AAAOC,OAAG;AAAV,GANa;AAO7BE,QAAM;AAACH,OAAG,CAAJ;AAAOC,OAAG;AAAV,GAPuB;AAQ7BG,SAAO;AAACJ,OAAG,CAAJ;AAAOC,OAAG;AAAV;AARsB,CAAxB;AAWP;;;;;;;;;;;;;;;;;AAcO,SAASI,kBAAT,OAMJ;AAAA,MALDL,CAKC,QALDA,CAKC;AAAA,MALEC,CAKF,QALEA,CAKF;AAAA,MAJDK,KAIC,QAJDA,KAIC;AAAA,MAJMC,MAIN,QAJMA,MAIN;AAAA,MAHDC,SAGC,QAHDA,SAGC;AAAA,MAHUC,UAGV,QAHUA,UAGV;AAAA,MAFDC,MAEC,QAFDA,MAEC;AAAA,0BADDC,OACC;AAAA,MADDA,OACC,6BADS,CACT;AAAA,8BAC8Bb,gBAAgBY,MAAhB,CAD9B;AAAA,MACOE,OADP,yBACIZ,CADJ;AAAA,MACmBa,OADnB,yBACgBZ,CADhB,EAGD;;AACA,MAAIF,MAAME,IAAIY,UAAUJ,UAAxB;AACA,MAAIP,SAASH,MAAMU,UAAnB,CALC,CAMD;;AACA,MAAMK,QAAQ,GAAd;;AAEA,MAAIf,MAAMY,OAAV,EAAmB;AACjB;AACA,WAAOZ,MAAMY,OAAN,IAAiBE,WAAWC,KAAnC,EAA0C;AACxCD,iBAAWC,KAAX;AACAf,aAAOe,QAAQL,UAAf;AACD;AACF,GAND,MAMO,IAAIP,SAASK,SAASI,OAAtB,EAA+B;AACpC;AACA,WAAOT,SAASK,SAASI,OAAlB,IAA6BE,WAAW,IAAIC,KAAnD,EAA0D;AACxDD,iBAAWC,KAAX;AACAZ,gBAAUY,QAAQL,UAAlB;AACD;AACF,GArBA,CAuBD;;;AACA,MAAIN,OAAOH,IAAIY,UAAUJ,SAAzB;AACA,MAAIJ,QAAQD,OAAOK,SAAnB,CAzBC,CA2BD;;AACA,MAAIO,QAAQ,GAAZ;;AACA,MAAIF,YAAY,GAAhB,EAAqB;AACnB;AACAD,cAAUI,KAAKC,KAAL,CAAWL,OAAX,CAAV;AACAG,YAAQ,CAAR;AACD;;AAED,MAAIZ,OAAOQ,OAAX,EAAoB;AAClB;AACA,WAAOR,OAAOQ,OAAP,IAAkBC,WAAWG,KAApC,EAA2C;AACzCH,iBAAWG,KAAX;AACAZ,cAAQY,QAAQP,SAAhB;AACD;AACF,GAND,MAMO,IAAIJ,QAAQE,QAAQK,OAApB,EAA6B;AAClC;AACA,WAAOP,QAAQE,QAAQK,OAAhB,IAA2BC,WAAW,IAAIG,KAAjD,EAAwD;AACtDH,iBAAWG,KAAX;AACAX,eAASW,QAAQP,SAAjB;AACD;AACF,GA/CA,CAiDD;;;AACA,SAAOU,OAAOC,IAAP,CAAYrB,eAAZ,EAA6BsB,IAA7B,CAAkC,UAACC,YAAD,EAAkB;AACzD,QAAMC,iBAAiBxB,gBAAgBuB,YAAhB,CAAvB;AACA,WAAOC,eAAetB,CAAf,KAAqBY,OAArB,IAAgCU,eAAerB,CAAf,KAAqBY,OAA5D;AACD,GAHM,CAAP;AAID","sourcesContent":["\nexport const ANCHOR_POSITION = {\n  top: {x: 0.5, y: 0},\n  'top-left': {x: 0, y: 0},\n  'top-right': {x: 1, y: 0},\n  bottom: {x: 0.5, y: 1},\n  'bottom-left': {x: 0, y: 1},\n  'bottom-right': {x: 1, y: 1},\n  left: {x: 0, y: 0.5},\n  right: {x: 1, y: 0.5}\n};\n\n/**\n * Calculate the dynamic position for a popup to fit in a container.\n * @param {Number} x - x position of the anchor on screen\n * @param {Number} y - y position of the anchor on screen\n * @param {Number} width - width of the container\n * @param {Number} height - height of the container\n * @param {Number} padding - extra space from the edge in pixels\n * @param {Number} selfWidth - width of the popup\n * @param {Number} selfHeight - height of the popup\n * @param {String} anchor - type of the anchor, one of 'top', 'bottom',\n    'left', 'right', 'top-left', 'top-right', 'bottom-left' , and  'bottom-right'\n * @returns {String} position - one of 'top', 'bottom',\n    'left', 'right', 'top-left', 'top-right', 'bottom-left' , and  'bottom-right'\n */\nexport function getDynamicPosition({\n  x, y,\n  width, height,\n  selfWidth, selfHeight,\n  anchor,\n  padding = 0\n}) {\n  let {x: anchorX, y: anchorY} = ANCHOR_POSITION[anchor];\n\n  // anchorY: top - 0, center - 0.5, bottom - 1\n  let top = y - anchorY * selfHeight;\n  let bottom = top + selfHeight;\n  // If needed, adjust anchorY at 0.5 step between [0, 1]\n  const yStep = 0.5;\n\n  if (top < padding) {\n    // Top edge is outside, try move down\n    while (top < padding && anchorY >= yStep) {\n      anchorY -= yStep;\n      top += yStep * selfHeight;\n    }\n  } else if (bottom > height - padding) {\n    // bottom edge is outside, try move up\n    while (bottom > height - padding && anchorY <= 1 - yStep) {\n      anchorY += yStep;\n      bottom -= yStep * selfHeight;\n    }\n  }\n\n  // anchorX: left - 0, center - 0.5, right - 1\n  let left = x - anchorX * selfWidth;\n  let right = left + selfWidth;\n\n  // If needed, adjust anchorX at 0.5 step between [0, 1]\n  let xStep = 0.5;\n  if (anchorY === 0.5) {\n    // If y is centered, then x cannot also be centered\n    anchorX = Math.floor(anchorX);\n    xStep = 1;\n  }\n\n  if (left < padding) {\n    // Left edge is outside, try move right\n    while (left < padding && anchorX >= xStep) {\n      anchorX -= xStep;\n      left += xStep * selfWidth;\n    }\n  } else if (right > width - padding) {\n    // Right edge is outside, try move left\n    while (right > width - padding && anchorX <= 1 - xStep) {\n      anchorX += xStep;\n      right -= xStep * selfWidth;\n    }\n  }\n\n  // Find the name of the new anchor position\n  return Object.keys(ANCHOR_POSITION).find((positionType) => {\n    const anchorPosition = ANCHOR_POSITION[positionType];\n    return anchorPosition.x === anchorX && anchorPosition.y === anchorY;\n  });\n}\n"],"file":"dynamic-position.js"}