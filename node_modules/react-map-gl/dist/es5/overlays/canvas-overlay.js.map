{"version":3,"sources":["../../../src/overlays/canvas-overlay.js"],"names":["propTypes","Object","assign","BaseControl","redraw","PropTypes","func","isRequired","defaultProps","captureScroll","captureDrag","captureClick","captureDoubleClick","CanvasOverlay","props","_redraw","bind","_canvasLoaded","pixelRatio","window","devicePixelRatio","canvas","_canvas","ctx","getContext","save","scale","context","viewport","isDragging","width","height","project","unproject","restore","ref","_onContainerLoad","style","position","pointerEvents","left","top","displayName"],"mappings":";;;;;;;AAoBA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,YAAYC,OAAOC,MAAP,CAAc,EAAd,EAAkBC,qBAAYH,SAA9B,EAAyC;AACzDI,UAAQC,mBAAUC,IAAV,CAAeC;AADkC,CAAzC,CAAlB;AAIA,IAAMC,eAAe;AACnBC,iBAAe,KADI;AAEnBC,eAAa,KAFM;AAGnBC,gBAAc,KAHK;AAInBC,sBAAoB;AAJD,CAArB;;IAOqBC,a;;;;;AACnB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,0HAAMA,KAAN;AACA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,+BAAf;AACA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBD,IAAnB,+BAArB;AAHiB;AAIlB;;;;wCAEmB;AAClB,WAAKD,OAAL;AACD;;;yCAEoB;AACnB,WAAKA,OAAL;AACD;;;8BAES;AACR,UAAMG,aAAaC,gBAAOC,gBAAP,IAA2B,CAA9C;AACA,UAAMC,SAAS,KAAKC,OAApB;AACA,UAAMC,MAAMF,OAAOG,UAAP,CAAkB,IAAlB,CAAZ;AACAD,UAAIE,IAAJ;AACAF,UAAIG,KAAJ,CAAUR,UAAV,EAAsBA,UAAtB;AALQ,0BAOuB,KAAKS,OAP5B;AAAA,UAODC,QAPC,iBAODA,QAPC;AAAA,UAOSC,UAPT,iBAOSA,UAPT;AAQR,WAAKf,KAAL,CAAWV,MAAX,CAAkB;AAChB0B,eAAOF,SAASE,KADA;AAEhBC,gBAAQH,SAASG,MAFD;AAGhBR,gBAHgB;AAIhBM,8BAJgB;AAKhBG,iBAASJ,SAASI,OAAT,CAAiBhB,IAAjB,CAAsBY,QAAtB,CALO;AAMhBK,mBAAWL,SAASK,SAAT,CAAmBjB,IAAnB,CAAwBY,QAAxB;AANK,OAAlB;AASAL,UAAIW,OAAJ;AACD;;;kCAEaC,G,EAAK;AACjB,WAAKb,OAAL,GAAea,GAAf;;AACA,WAAKC,gBAAL,CAAsBD,GAAtB;AACD;;;6BAEQ;AACP,UAAMjB,aAAaC,gBAAOC,gBAAP,IAA2B,CAA9C;AADO,kCAE6B,KAAKO,OAFlC,CAEAC,QAFA;AAAA,UAEWE,KAFX,yBAEWA,KAFX;AAAA,UAEkBC,MAFlB,yBAEkBA,MAFlB;AAIP,aACE,0BAAc,QAAd,EAAwB;AACtBI,aAAK,KAAKlB,aADY;AAEtBa,eAAOA,QAAQZ,UAFO;AAGtBa,gBAAQA,SAASb,UAHK;AAItBmB,eAAO;AACLP,2BAAUA,KAAV,OADK;AAELC,4BAAWA,MAAX,OAFK;AAGLO,oBAAU,UAHL;AAILC,yBAAe,MAJV;AAKLC,gBAAM,CALD;AAMLC,eAAK;AANA;AAJe,OAAxB,CADF;AAeD;;;;EA3DwCtC,oB;;;AA8D3CU,cAAc6B,WAAd,GAA4B,eAA5B;AACA7B,cAAcb,SAAd,GAA0BA,SAA1B;AACAa,cAAcL,YAAd,GAA6BA,YAA7B","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createElement} from 'react';\nimport PropTypes from 'prop-types';\nimport BaseControl from '../components/base-control';\nimport {window} from '../utils/globals';\n\nconst propTypes = Object.assign({}, BaseControl.propTypes, {\n  redraw: PropTypes.func.isRequired\n});\n\nconst defaultProps = {\n  captureScroll: false,\n  captureDrag: false,\n  captureClick: false,\n  captureDoubleClick: false\n};\n\nexport default class CanvasOverlay extends BaseControl {\n  constructor(props) {\n    super(props);\n    this._redraw = this._redraw.bind(this);\n    this._canvasLoaded = this._canvasLoaded.bind(this);\n  }\n\n  componentDidMount() {\n    this._redraw();\n  }\n\n  componentDidUpdate() {\n    this._redraw();\n  }\n\n  _redraw() {\n    const pixelRatio = window.devicePixelRatio || 1;\n    const canvas = this._canvas;\n    const ctx = canvas.getContext('2d');\n    ctx.save();\n    ctx.scale(pixelRatio, pixelRatio);\n\n    const {viewport, isDragging} = this.context;\n    this.props.redraw({\n      width: viewport.width,\n      height: viewport.height,\n      ctx,\n      isDragging,\n      project: viewport.project.bind(viewport),\n      unproject: viewport.unproject.bind(viewport)\n    });\n\n    ctx.restore();\n  }\n\n  _canvasLoaded(ref) {\n    this._canvas = ref;\n    this._onContainerLoad(ref);\n  }\n\n  render() {\n    const pixelRatio = window.devicePixelRatio || 1;\n    const {viewport: {width, height}} = this.context;\n\n    return (\n      createElement('canvas', {\n        ref: this._canvasLoaded,\n        width: width * pixelRatio,\n        height: height * pixelRatio,\n        style: {\n          width: `${width}px`,\n          height: `${height}px`,\n          position: 'absolute',\n          pointerEvents: 'none',\n          left: 0,\n          top: 0\n        }\n      })\n    );\n  }\n}\n\nCanvasOverlay.displayName = 'CanvasOverlay';\nCanvasOverlay.propTypes = propTypes;\nCanvasOverlay.defaultProps = defaultProps;\n"],"file":"canvas-overlay.js"}