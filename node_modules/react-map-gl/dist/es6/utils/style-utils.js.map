{"version":3,"sources":["../../../src/utils/style-utils.js"],"names":["isImmutableMap","diffStyles","getInteractiveLayerIds","mapStyle","interactiveLayerIds","has","get","filter","l","map","toJS","Array","isArray","layers","interactive","id","setDiffStyle","prevStyle","nextStyle","styleKeysMap","style","delete","prevKeysMap","nextKeysMap","prevKeysList","Object","keys","nextKeysList","length","some","key","setStyle","sourcesDiff","layersDiff","checkForEqualLayerSourceChanges","exit","applySourceLayerChanges","updateStyleSource","update","newSource","source","type","oldSource","getSource","oldOpts","workerOptions","scale","geojsonVtOptions","extent","maxzoom","maxZoom","buffer","tolerance","cluster","clusterRadius","superclusterOptions","radius","clusterMaxZoom","setData","data","removeSource","addSource","updates","node","layer","enter","exiting","getLayer","removeLayer","addLayer","before","sourceExit","nextLayers","sourceIds","s","layersNotRemoved","lyr","includes","size","Error","join"],"mappings":"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","sourcesContent":["import isImmutableMap from './is-immutable-map';\nimport diffStyles from './diff-styles';\n\nexport function getInteractiveLayerIds(mapStyle) {\n  let interactiveLayerIds = null;\n\n  if (isImmutableMap(mapStyle) && mapStyle.has('layers')) {\n    interactiveLayerIds = mapStyle.get('layers')\n      .filter(l => l.get('interactive'))\n      .map(l => l.get('id'))\n      .toJS();\n  } else if (Array.isArray(mapStyle.layers)) {\n    interactiveLayerIds = mapStyle.layers.filter(l => l.interactive)\n      .map(l => l.id);\n  }\n\n  return interactiveLayerIds;\n}\n\n// Individually update the maps source and layers that have changed if all\n// other style props haven't changed. This prevents flicking of the map when\n// styles only change sources or layers.\n/* eslint-disable max-statements, complexity */\nexport function setDiffStyle(prevStyle, nextStyle, map) {\n  const prevKeysMap = prevStyle && styleKeysMap(prevStyle) || {};\n  const nextKeysMap = styleKeysMap(nextStyle);\n  function styleKeysMap(style) {\n    return style.map(() => true).delete('layers').delete('sources').toJS();\n  }\n  function propsOtherThanLayersOrSourcesDiffer() {\n    const prevKeysList = Object.keys(prevKeysMap);\n    const nextKeysList = Object.keys(nextKeysMap);\n    if (prevKeysList.length !== nextKeysList.length) {\n      return true;\n    }\n    // `nextStyle` and `prevStyle` should not have the same set of props.\n    if (nextKeysList.some(\n      key => prevStyle.get(key) !== nextStyle.get(key)\n      // But the value of one of those props is different.\n    )) {\n      return true;\n    }\n    return false;\n  }\n\n  if (!prevStyle || propsOtherThanLayersOrSourcesDiffer()) {\n    map.setStyle(nextStyle.toJS());\n    return;\n  }\n\n  const {sourcesDiff, layersDiff} = diffStyles(prevStyle, nextStyle);\n  checkForEqualLayerSourceChanges(sourcesDiff.exit, nextStyle.get('layers'));\n  applySourceLayerChanges(map, nextStyle, sourcesDiff, layersDiff);\n}\n\n/* eslint-enable max-statements, complexity */\n\n// Update a source in the map style\nfunction updateStyleSource(map, update) {\n  const newSource = update.source.toJS();\n  if (newSource.type === 'geojson') {\n    const oldSource = map.getSource(update.id);\n    if (oldSource.type === 'geojson') {\n      // update data if no other GeoJSONSource options were changed\n      const oldOpts = oldSource.workerOptions;\n      // GeoJSONSource class scales user options before assigning to workerOptions\n      // https://github.com/mapbox/mapbox-gl-js/blob/master/src/source/geojson_source.js\n      const scale = oldOpts.geojsonVtOptions.extent / 512;\n\n      if (\n        (newSource.maxzoom === undefined ||\n          newSource.maxzoom === oldOpts.geojsonVtOptions.maxZoom) &&\n        (newSource.buffer === undefined ||\n          newSource.buffer === oldOpts.geojsonVtOptions.buffer / scale) &&\n        (newSource.tolerance === undefined ||\n          newSource.tolerance === oldOpts.geojsonVtOptions.tolerance / scale) &&\n        (newSource.cluster === undefined ||\n          newSource.cluster === oldOpts.cluster) &&\n        (newSource.clusterRadius === undefined ||\n          newSource.clusterRadius === oldOpts.superclusterOptions.radius / scale) &&\n        (newSource.clusterMaxZoom === undefined ||\n          newSource.clusterMaxZoom === oldOpts.superclusterOptions.maxZoom)\n      ) {\n        oldSource.setData(newSource.data);\n        return;\n      }\n    }\n  }\n\n  map.removeSource(update.id);\n  map.addSource(update.id, newSource);\n}\n\nfunction applySourceLayerChanges(map, nextStyle, sourcesDiff, layersDiff) {\n// TODO: It's rather difficult to determine style diffing in the presence\n  // of refs. For now, if any style update has a ref, fallback to no diffing.\n  // We can come back to this case if there's a solid usecase.\n  if (layersDiff.updates.some(node => node.layer.get('ref'))) {\n    map.setStyle(nextStyle.toJS());\n    return;\n  }\n\n  for (const enter of sourcesDiff.enter) {\n    map.addSource(enter.id, enter.source.toJS());\n  }\n  for (const update of sourcesDiff.update) {\n    updateStyleSource(map, update);\n  }\n\n  for (const exit of layersDiff.exiting) {\n    if (map.style.getLayer(exit.id)) {\n      map.removeLayer(exit.id);\n    }\n  }\n  for (const update of layersDiff.updates) {\n    if (!update.enter) {\n      // This is an old layer that needs to be updated. Remove the old layer\n      // with the same id and add it back again.\n      map.removeLayer(update.id);\n    }\n    map.addLayer(update.layer.toJS(), update.before);\n  }\n\n  for (const exit of sourcesDiff.exit) {\n    map.removeSource(exit.id);\n  }\n}\n\n/* eslint-disable max-len */\nfunction checkForEqualLayerSourceChanges(sourceExit, nextLayers) {\n  const sourceIds = sourceExit.map(s => s.id);\n  const layersNotRemoved = nextLayers.filter(lyr => sourceIds.includes(lyr.get('source')));\n  if (layersNotRemoved.size) {\n    // because of this, no source/layer changes will take effect if there is an error\n    throw new Error(`You must remove any layers associated with sources you are removing: ${layersNotRemoved.map(l => l.get('id')).toJS().join('')}`);\n  }\n}\n"],"file":"style-utils.js"}