{"version":3,"sources":["../../../../src/utils/transition/viewport-fly-to-interpolator.js"],"names":["assert","TransitionInterpolator","flyToViewport","isValid","lerp","getEndValueByShortestPath","VIEWPORT_TRANSITION_PROPS","REQUIRED_PROPS","LINEARLY_INTERPOLATED_PROPS","ViewportFlyToInterpolator","propNames","startProps","endProps","startViewportProps","endViewportProps","key","startValue","endValue","start","end","t","viewport"],"mappings":"8xDAAA,MAAOA,OAAP,KAAmB,WAAnB,CACA,MAAOC,uBAAP,KAAmC,2BAAnC,CAEA,OAAQC,aAAR,KAA4B,2BAA5B,CACA,OAAQC,OAAR,CAAiBC,IAAjB,CAAuBC,yBAAvB,KAAuD,oBAAvD,C,GAEMC,2BAA4B,CAAC,WAAD,CAAc,UAAd,CAA0B,MAA1B,CAAkC,SAAlC,CAA6C,OAA7C,C,CAC5BC,eAAiB,CAAC,UAAD,CAAa,WAAb,CAA0B,MAA1B,CAAkC,OAAlC,CAA2C,QAA3C,C,CACjBC,4BAA8B,CAAC,SAAD,CAAY,OAAZ,C,CASfC,yB,iCAEnB,oCAAc,4MAEZ,MAAKC,SAAL,CAAiBJ,yBAFL,MAGb,C,gKAEeK,U,CAAYC,Q,CAAU,CAKpC,OAJMC,oBAAqB,EAI3B,CAHMC,iBAAmB,EAGzB,SAAkBP,cAAlB,aAAkC,IAAvBQ,KAAOR,cAAP,IAAuB,CAC1BS,WAAaL,WAAWI,GAAX,CADa,CAE1BE,SAAWL,SAASG,GAAT,CAFe,CAGhCf,OAAOG,QAAQa,UAAR,GAAuBb,QAAQc,QAAR,CAA9B,WAAoDF,GAApD,qCAHgC,CAIhCF,mBAAmBE,GAAnB,EAA0BC,UAJM,CAKhCF,iBAAiBC,GAAjB,EAAwBV,0BAA0BU,GAA1B,CAA+BC,UAA/B,CAA2CC,QAA3C,CACzB,CAED,kBAAkBT,2BAAlB,cAA+C,IAApCO,MAAOP,2BAAP,KAAoC,CACvCQ,YAAaL,WAAWI,IAAX,GAAmB,CADO,CAEvCE,UAAWL,SAASG,IAAT,GAAiB,CAFW,CAG7CF,mBAAmBE,IAAnB,EAA0BC,WAHmB,CAI7CF,iBAAiBC,IAAjB,EAAwBV,0BAA0BU,IAA1B,CAA+BC,WAA/B,CAA2CC,SAA3C,CACzB,CAED,MAAO,CACLC,MAAOL,kBADF,CAELM,IAAKL,gBAFA,CAIR,C,0DAEgBH,U,CAAYC,Q,CAAUQ,C,CAAG,CAIxC,OAAWL,IAAX,CAHMM,SAAWnB,cAAcS,UAAd,CAA0BC,QAA1B,CAAoCQ,CAApC,CAGjB,WAAkBZ,2BAAlB,cAAWO,GAAX,CAAkBP,2BAAlB,MACEa,SAASN,GAAT,EAAgBX,KAAKO,WAAWI,GAAX,CAAL,CAAsBH,SAASG,GAAT,CAAtB,CAAqCK,CAArC,CADlB,CAIA,MAAOC,SACR,C,+BA1CoDpB,sB,SAAlCQ,yB","sourcesContent":["import assert from '../assert';\nimport TransitionInterpolator from './transition-interpolator';\n\nimport {flyToViewport} from 'viewport-mercator-project';\nimport {isValid, lerp, getEndValueByShortestPath} from './transition-utils';\n\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst REQUIRED_PROPS = ['latitude', 'longitude', 'zoom', 'width', 'height'];\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n*/\nexport default class ViewportFlyToInterpolator extends TransitionInterpolator {\n\n  constructor() {\n    super();\n    this.propNames = VIEWPORT_TRANSITION_PROPS;\n  }\n\n  initializeProps(startProps, endProps) {\n    const startViewportProps = {};\n    const endViewportProps = {};\n\n    // Check minimum required props\n    for (const key of REQUIRED_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      assert(isValid(startValue) && isValid(endValue), `${key} must be supplied for transition`);\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      const startValue = startProps[key] || 0;\n      const endValue = endProps[key] || 0;\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    return {\n      start: startViewportProps,\n      end: endViewportProps\n    };\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t);\n\n    // Linearly interpolate 'bearing' and 'pitch' if exist.\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key], endProps[key], t);\n    }\n\n    return viewport;\n  }\n\n}\n"],"file":"viewport-fly-to-interpolator.js"}