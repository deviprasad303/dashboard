{"version":3,"sources":["../../../src/utils/transition-manager.js"],"names":["assert","LinearInterpolator","MapState","noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","DEFAULT_STATE","animation","propsInTransition","startProps","endProps","TransitionManager","props","state","_onTransitionFrame","bind","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","isTransitionInProgress","_isTransitionInProgress","_isTransitionEnabled","Object","assign","interruption","_triggerTransition","_endTransition","interpolator","arePropsEqual","_isUpdateDueToCurrentTransition","cancelAnimationFrame","initialProps","initializeProps","duration","easing","startTime","Date","now","start","end","requestAnimationFrame","_updateViewport","currentTime","shouldEnd","viewport","interpolateProps","mapState","getViewportProps","onViewportChange","onChangeViewport","onViewStateChange","viewState","defaultProps"],"mappings":"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","sourcesContent":["/* global requestAnimationFrame, cancelAnimationFrame */\nimport assert from './assert';\nimport {LinearInterpolator} from './transition';\nimport MapState from './map-state';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nconst DEFAULT_STATE = {\n  animation: null,\n  propsInTransition: null,\n  startProps: null,\n  endProps: null\n};\n\nexport default class TransitionManager {\n  constructor(props) {\n    this.props = props;\n    this.state = DEFAULT_STATE;\n\n    this._onTransitionFrame = this._onTransitionFrame.bind(this);\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.state.propsInTransition;\n  }\n\n  // Process the viewport change, either ignore or trigger a new transiton.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewportChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    const isTransitionInProgress = this._isTransitionInProgress();\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign({}, currentProps,\n        this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END ?\n        this.state.endProps : this.state.propsInTransition\n      );\n\n      if (isTransitionInProgress) {\n        currentProps.onTransitionInterrupt();\n      }\n      nextProps.onTransitionStart();\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else if (isTransitionInProgress) {\n      currentProps.onTransitionInterrupt();\n      this._endTransition();\n    }\n\n    return transitionTriggered;\n  }\n\n  // Helper methods\n\n  _isTransitionInProgress() {\n    return Boolean(this.state.propsInTransition);\n  }\n\n  _isTransitionEnabled(props) {\n    return props.transitionDuration > 0 && Boolean(props.transitionInterpolator);\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.state.propsInTransition) {\n      return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this._isTransitionInProgress()) {\n      // Ignore update if it is requested to be ignored\n      return this.state.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps);\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps), 'Transition is not enabled');\n\n    cancelAnimationFrame(this.state.animation);\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endProps\n    );\n\n    this.state = {\n      // Save current transition props\n      duration: endProps.transitionDuration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startTime: Date.now(),\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      animation: null,\n      propsInTransition: {}\n    };\n\n    this._onTransitionFrame();\n  }\n\n  _onTransitionFrame() {\n    // _updateViewport() may cancel the animation\n    this.state.animation = requestAnimationFrame(this._onTransitionFrame);\n    this._updateViewport();\n  }\n\n  _endTransition() {\n    cancelAnimationFrame(this.state.animation);\n    this.state = DEFAULT_STATE;\n  }\n\n  _updateViewport() {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const currentTime = Date.now();\n    const {startTime, duration, easing, interpolator, startProps, endProps} = this.state;\n\n    let shouldEnd = false;\n    let t = (currentTime - startTime) / duration;\n    if (t >= 1) {\n      t = 1;\n      shouldEnd = true;\n    }\n    t = easing(t);\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n      // Normalize viewport props\n    const mapState = new MapState(Object.assign({}, this.props, viewport));\n    this.state.propsInTransition = mapState.getViewportProps();\n\n    // TODO(deprecate): remove this check when `onChangeViewport` gets deprecated\n    const onViewportChange = this.props.onViewportChange || this.props.onChangeViewport;\n    if (onViewportChange) {\n      onViewportChange(this.state.propsInTransition);\n    }\n\n    if (this.props.onViewStateChange) {\n      this.props.onViewStateChange({viewState: this.state.propsInTransition});\n    }\n\n    if (shouldEnd) {\n      this._endTransition();\n      this.props.onTransitionEnd();\n    }\n  }\n}\n\nTransitionManager.defaultProps = DEFAULT_PROPS;\n"],"file":"transition-manager.js"}