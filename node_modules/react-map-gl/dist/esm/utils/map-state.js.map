{"version":3,"sources":["../../../src/utils/map-state.js"],"names":["WebMercatorViewport","normalizeViewportProps","assert","MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","clamp","value","min","max","MapState","width","height","latitude","longitude","zoom","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","_viewportProps","_applyConstraints","_interactiveState","Number","isFinite","pos","_getUpdatedMapState","_unproject","startPos","_calculateNewLngLat","deltaScaleX","deltaScaleY","_calculateNewPitchAndBearing","scale","_calculateNewZoom","zoomedViewport","Object","assign","getLocationAtPoint","lngLat","newProps","props","viewport","unproject","getMapCenterByLngLatPosition","Math","log2"],"mappings":"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","sourcesContent":["import WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport assert from './assert';\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\n/* Utils */\nfunction clamp(value, min, max) {\n  return value < min ? min : (value > max ? max : value);\n}\n\nexport default class MapState {\n\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Transition props */\n    transitionDuration,\n    transitionEasing,\n    transitionInterpolator,\n    transitionInterruption,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  } = {}) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      transitionDuration,\n      transitionEasing,\n      transitionInterpolator,\n      transitionInterruption\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedMapState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedMapState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedMapState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedMapState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0}) {\n\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing,\n      startPitch\n    });\n\n    return this._getUpdatedMapState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedMapState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedMapState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(startZoomLngLat, '`startZoomLngLat` prop is required ' +\n      'for zoom behavior to calculate where to position the map.');\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = new WebMercatorViewport(\n      Object.assign({}, this._viewportProps, {zoom})\n    );\n    const [longitude, latitude] = zoomedViewport.getLocationAtPoint({lngLat: startZoomLngLat, pos});\n\n    return this._getUpdatedMapState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedMapState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedMapState(newProps) {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n}\n"],"file":"map-state.js"}